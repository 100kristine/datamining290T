* Multimedia Data Mining :slide:

* Features :slide:two_col:
  + Core algorithms similar to "traditional" data mining
  + Difference lies in feature engineering
  + How to translate intuitions to numbers and formulas?
  [[file:img/face-recognition.jpg]]

* Types :slide:
  + Spatial :: geographic points and features, including natural and man-made
    phenomenon
  + Images :: Size, color, shape, curves, relative positions
  + Music :: Tone, tempo, beat, rythem
  + Voice :: Speed, accent, word pasuses, background noise
** Covering :notes:
   + We'll cover these areas briefly to get an overview of techniques used in
     these fields
   + All of these things *have* embeded information in them, and we are trying
     to extract it
   + One of the reasons data mining is not a black box: some one has to be on
     the outside interperating results. Results inform technique

* Generalization :slide:two_col:
  + Many of these areas have digital representations
  + Can we use the raw bit representations?
  + Usually not: must generalize patterns
  [[file:img/digits.png]]
** Density :notes:
   + The data we get from digital representations is generally too sparse
   + Key component of good learning is *data*, but you need fairly *dense* data
     to learn a pattern
   + Hypothertically, a neural network could extract general features from raw
     data, but you'd need a really large amount of data in order to get the
     density needed
   + Example: for NLP, perhaps your corpus is too sparse: not many words are
     shared between documents.  So instead generalize: what parts of speech or
     patterns show up across documents?

* GIS :slide:two_col:
  + Geographic Inforamtion Systems
  + Analysis and visualtion of geographic data
  + Search, terrain, object detection, flow calculations
  [[file:img/gis.jpg]]

* Spatial Databases :slide:
  + Integrates spatial information with traditional DBMS operations
  + Spatial indexing, distance metrics, polygon definitions, layering
  + Eg: Oracle Spatial Data Catridge, ESRI Spatial Engine

* Discovery :slide:
  + What are examples of efficient city layouts?
  + What influences successful business centers?
  + Deforrestation rates
** Ideas :notes:
   + City layouts: Understanding home->work distances, not Euclidean, but
     traffic on streets or by public transportation, recognizing traffic jams
   + Business centers: analyzing network flow based on roads: industrial
     supply centers nearby?  Creative centers, restaurants, nightlife?
   + Deforestation: nearby cities' effect? Recognizing forrested areas vs
     clear cut. Time series

* ATM Locations given obstacles :slide:center:
  [[file:img/obstacle-clustering.png]]
** Yelp :notes:
   + This is a current area we could improve at Yelp:
   + Just because you're a mile from a restaurant doesn't mean it is "close"
   + Maybe across the Bay, or maybe in between metro stops
   + How can you calculate efficiently?

* Images :slide:two_col:
  + General Feature Extraction
  + Sketch Recognition
  + Image Recognition
  [[file:img/Sift_keypoints_filtering.jpg]]
** Covering :notes:
   + We'll cover some interesting ways to extract dimenions
   + ML/data mining combine these dimensions to do recognition with, eg.
     labeled data
   + Image on the right is using an algorithm to pick out, then filter
     "interesting" points on the image
   + img: http://en.wikipedia.org/wiki/Scale-invariant_feature_transform

* SIFT :slide:
  [[file:img/Sift_keypoints_filtering.jpg]]
** Process :notes:
   + Successively apply gaussian blur to image
   + Find points which "stand out" between blurs (ie big differences)
   + You can connect these keypoints to make a kind of fingerprint
   + These fingerprints can be used, scaled, etc to match against other images

* Sketch Recognition :slide:center:
  [[file:img/sketch-1.png]]
 + Find (x,y) points along a sketch
** Why? :notes:
   + Sketch recognition can be used to see if you're drawing shapes
   + Be nice to be able to snap a picture of your diagram on a napkin and have
     it come out nicely formatted?
   + But how to recognize a circle, assuming you can't draw a perfect circle?
   + Start with (x,y) points, but as we mentioned, very sparse
   + Images by Marty Field

* Direction :slide:center:
  [[file:img/sketch-2.png]]
 + Find angles along a sketch
** Angles? :notes:
   + Instead of points, measure the angle at each turn
   + You'll notice something peculiear about these angles. What?
   + They're more than +/- 180 because we want to continue a "trend" if
     they're turning the same way. Help identify changes in direction vs
     spirals

* Direction Plot :slide:center:
  [[file:img/sketch-3.png]]
 + Plot angles vs time
** Why? :notes:
   + Becomes even more generalized:
     + What is the derivative?
     + How many times to we change derivatives?

* Direction Plot :slide:center:
  [[file:img/sketch-4.png]]
 + Plot angles vs time
** Why? :notes:
   + Example where we change directions

* Features :slide:center:
  [[file:img/sketch-5.png]]
 + NDDE :: Normalized Distance between Direction Extremes
 + DCR :: Direction Change Ratio
** Why? :notes:
   + NDDE :: Are the discontinuous changes in direction, or is the line
     + generally curvey, and follows a similar path?
   + DCR :: Total amount of angle change in the sketch. Low for first, high
     for second
   + Others? :: bounding box size/ratio, storke length, disntance betwen endpoints,
     length, width, height, speed, direction, acceleration

* All Together Now :slide:
#+BEGIN_HTML
<iframe src="http://player.vimeo.com/video/6496886" frameborder="0" webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe> <p><a href="http://vimeo.com/6496886">Sketch2Photo: Internet Image Montage</a> from <a href="http://vimeo.com/user2276797">Tao Chen</a> on <a href="http://vimeo.com">Vimeo</a>.</p>
#+END_HTML
[[http://vimeo.com/6496886][Sketch2Photo]]

* Music :slide:
  + Generate a finger print: time, frequency, amplitude
  + Filter most intense (largest) amplitudes
  + Create a hash of connections between points
  + Match, in time, the hash between songs
  [[file:img/music_match.png]]
** Relation to Images :notes:
   + Intreesting to note: we transformed one media type (music) into another
     (image), then started using some techniques we've seen in image
     fingerprinting
   + More in reading

* *Break* :slide:

#+STYLE: <link rel="stylesheet" type="text/css" href="production/common.css" />
#+STYLE: <link rel="stylesheet" type="text/css" href="production/screen.css" media="screen" />
#+STYLE: <link rel="stylesheet" type="text/css" href="production/projection.css" media="projection" />
#+STYLE: <link rel="stylesheet" type="text/css" href="production/color-blue.css" media="projection" />
#+STYLE: <link rel="stylesheet" type="text/css" href="production/presenter.css" media="presenter" />
#+STYLE: <link href='http://fonts.googleapis.com/css?family=Lobster+Two:700|Yanone+Kaffeesatz:700|Open+Sans' rel='stylesheet' type='text/css'>

#+BEGIN_HTML
<script type="text/javascript" src="production/org-html-slideshow.js"></script>
#+END_HTML

# Local Variables:
# org-export-html-style-include-default: nil
# org-export-html-style-include-scripts: nil
# buffer-file-coding-system: utf-8-unix
# End:
